% Autogenerated file: Tue Feb 15 17:49:35 2022
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('C:\Users\Thibault NOUVELLON\Documents\EPSA\Github\ELIZ-2021\EL_Electrical\Autre\Bamocar\Calibration_2020a_MPC5644A_rtw\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;





wr = coder.internal.writeMF0DataInterfacesToCodeDescriptor("Calibration_2020a","C:\Users\Thibault NOUVELLON\Documents\EPSA\Github\ELIZ-2021\EL_Electrical\Autre\Bamocar\Calibration_2020a_MPC5644A_rtw") ;
wr.writeName(codeInfo.Name);
fr = wr;



skippedParameters = [];

  tmpParams = [];




              
% Built-In Type: 1
Type_1_R0_V0_C0 = coder.types.Single;
  Type_1_R0_V0_C0.Name = 'single';
  Type_1_R0_V0_C0.Identifier = 'real32_T';
  Type_1_R0_V0_C0.ReadOnly   = 0;
  Type_1_R0_V0_C0.Volatile   = 0;
              


    
% Variable: Var_tension2
Var_tension2 = RTW.Variable(Type_1_R0_V0_C0, 'tension2');
    Var_tension2.Owner           = 'Calibration_2020a';
    Var_tension2.DeclarationFile = 'Calibration_2020a.h';
    Var_tension2.DefinitionFile  = 'Calibration_2020a.c';
    
                 
             Var_tension2.StorageSpecifier = 'extern';
            Var_tension2.CodeType = Type_1_R0_V0_C0;
            wr.writeExternalBlockOutput(Var_tension2, 0);

              
% Built-In Type: 5
Type_5_R0_V0_C0 = coder.types.Int(16,0);
  Type_5_R0_V0_C0.Name = 'uint16';
  Type_5_R0_V0_C0.Identifier = 'uint16_T';
  Type_5_R0_V0_C0.ReadOnly   = 0;
  Type_5_R0_V0_C0.Volatile   = 0;
              


    
% Variable: Var_tension3
Var_tension3 = RTW.Variable(Type_5_R0_V0_C0, 'tension3');
    Var_tension3.Owner           = 'Calibration_2020a';
    Var_tension3.DeclarationFile = 'Calibration_2020a.h';
    Var_tension3.DefinitionFile  = 'Calibration_2020a.c';
    
                 
             Var_tension3.StorageSpecifier = 'extern';
            Var_tension3.CodeType = Type_5_R0_V0_C0;
            wr.writeExternalBlockOutput(Var_tension3, 1);

              
% Built-In Type: 8
 Type_8_R0_V0_C0 = coder.types.Bool;
  Type_8_R0_V0_C0.Name = 'boolean';
  Type_8_R0_V0_C0.Identifier = 'boolean_T';
  Type_8_R0_V0_C0.ReadOnly   = 0;
  Type_8_R0_V0_C0.Volatile   = 0;
              


    
% Variable: Var_PwrM_flgKeyOnDelay
Var_PwrM_flgKeyOnDelay = RTW.Variable(Type_8_R0_V0_C0, 'PwrM_flgKeyOnDelay');
    Var_PwrM_flgKeyOnDelay.Owner           = 'Calibration_2020a';
    Var_PwrM_flgKeyOnDelay.DeclarationFile = 'Calibration_2020a.h';
    Var_PwrM_flgKeyOnDelay.DefinitionFile  = 'Calibration_2020a.c';
    
                 
             Var_PwrM_flgKeyOnDelay.StorageSpecifier = 'extern';
            Var_PwrM_flgKeyOnDelay.CodeType = Type_8_R0_V0_C0;
            wr.writeExternalBlockOutput(Var_PwrM_flgKeyOnDelay, 2);

              


    
% Variable: Var_PwrM_flgKeyOnRaw
Var_PwrM_flgKeyOnRaw = RTW.Variable(Type_8_R0_V0_C0, 'PwrM_flgKeyOnRaw');
    Var_PwrM_flgKeyOnRaw.Owner           = 'Calibration_2020a';
    Var_PwrM_flgKeyOnRaw.DeclarationFile = 'Calibration_2020a.h';
    Var_PwrM_flgKeyOnRaw.DefinitionFile  = 'Calibration_2020a.c';
    
                 
             Var_PwrM_flgKeyOnRaw.StorageSpecifier = 'extern';
            Var_PwrM_flgKeyOnRaw.CodeType = Type_8_R0_V0_C0;
            wr.writeExternalBlockOutput(Var_PwrM_flgKeyOnRaw, 3);


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        


    
    
    
        






    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
  

  func_Initialize_Prototype = coder.types.Prototype;
  func_Initialize_Prototype.Arguments  = tmpArgs;
  func_Initialize_Prototype.Return     = tmpRet;
    func_Initialize_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_Initialize_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_Initialize_Interface = RTW.FunctionInterface;
  func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
  func_Initialize_Interface.ActualArgs   = tmpActualArgs;
  func_Initialize_Interface.ActualReturn = tmpActualReturn;

      func_Initialize_Prototype.Name = 'Calibration_2020a_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      func_Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, func_Initialize_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        


% Unsized integer type    
Type_int_R0_V0 = coder.types.Int(32,1);
    Type_int_R0_V0.Identifier = 'int_T';
    Type_int_R0_V0.Name       = 'int';
    Type_int_R0_V0.ReadOnly   = 0;
    Type_int_R0_V0.Volatile   = 0;
    
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_0
Lit_0 = RTW.Literal(Type_int_R0_V0, 0);
    
    
% Data Interface: Const_TID0
empty_timing = RTW.TimingInterface.empty;
Const_TID0 = RTW.DataInterface('', 'TID0', Lit_0, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID0];    
  

  

  func_OutputUpdate0_Prototype = coder.types.Prototype;
  func_OutputUpdate0_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate0_Prototype.Return     = tmpRet;
    func_OutputUpdate0_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate0_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate0_Interface = RTW.FunctionInterface;
  func_OutputUpdate0_Interface.Prototype    = func_OutputUpdate0_Prototype;
  func_OutputUpdate0_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate0_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate0_Prototype.Name = 'Calibration_2020a_step';
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      func_OutputUpdate0_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate0_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_1
Lit_1 = RTW.Literal(Type_int_R0_V0, 1);
    
    
% Data Interface: Const_TID1
empty_timing = RTW.TimingInterface.empty;
Const_TID1 = RTW.DataInterface('', 'TID1', Lit_1, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID1];    
  

  

  func_OutputUpdate1_Prototype = coder.types.Prototype;
  func_OutputUpdate1_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate1_Prototype.Return     = tmpRet;
    func_OutputUpdate1_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate1_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate1_Interface = RTW.FunctionInterface;
  func_OutputUpdate1_Interface.Prototype    = func_OutputUpdate1_Prototype;
  func_OutputUpdate1_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate1_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate1_Prototype.Name = 'Calibration_2020a_step';
  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
      func_OutputUpdate1_Interface.Timing = time_1;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate1_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_2
Lit_2 = RTW.Literal(Type_int_R0_V0, 2);
    
    
% Data Interface: Const_TID2
empty_timing = RTW.TimingInterface.empty;
Const_TID2 = RTW.DataInterface('', 'TID2', Lit_2, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID2];    
  

  

  func_OutputUpdate2_Prototype = coder.types.Prototype;
  func_OutputUpdate2_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate2_Prototype.Return     = tmpRet;
    func_OutputUpdate2_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate2_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate2_Interface = RTW.FunctionInterface;
  func_OutputUpdate2_Interface.Prototype    = func_OutputUpdate2_Prototype;
  func_OutputUpdate2_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate2_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate2_Prototype.Name = 'Calibration_2020a_step';
  time_2 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 2));
      func_OutputUpdate2_Interface.Timing = time_2;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate2_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_3
Lit_3 = RTW.Literal(Type_int_R0_V0, 3);
    
    
% Data Interface: Const_TID3
empty_timing = RTW.TimingInterface.empty;
Const_TID3 = RTW.DataInterface('', 'TID3', Lit_3, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID3];    
  

  

  func_OutputUpdate3_Prototype = coder.types.Prototype;
  func_OutputUpdate3_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate3_Prototype.Return     = tmpRet;
    func_OutputUpdate3_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate3_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate3_Interface = RTW.FunctionInterface;
  func_OutputUpdate3_Interface.Prototype    = func_OutputUpdate3_Prototype;
  func_OutputUpdate3_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate3_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate3_Prototype.Name = 'Calibration_2020a_step';
  time_3 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 3));
      func_OutputUpdate3_Interface.Timing = time_3;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate3_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_4
Lit_4 = RTW.Literal(Type_int_R0_V0, 4);
    
    
% Data Interface: Const_TID4
empty_timing = RTW.TimingInterface.empty;
Const_TID4 = RTW.DataInterface('', 'TID4', Lit_4, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID4];    
  

  

  func_OutputUpdate4_Prototype = coder.types.Prototype;
  func_OutputUpdate4_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate4_Prototype.Return     = tmpRet;
    func_OutputUpdate4_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate4_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate4_Interface = RTW.FunctionInterface;
  func_OutputUpdate4_Interface.Prototype    = func_OutputUpdate4_Prototype;
  func_OutputUpdate4_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate4_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate4_Prototype.Name = 'Calibration_2020a_step';
  time_4 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 4));
      func_OutputUpdate4_Interface.Timing = time_4;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate4_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_5
Lit_5 = RTW.Literal(Type_int_R0_V0, 5);
    
    
% Data Interface: Const_TID5
empty_timing = RTW.TimingInterface.empty;
Const_TID5 = RTW.DataInterface('', 'TID5', Lit_5, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID5];    
  

  

  func_OutputUpdate5_Prototype = coder.types.Prototype;
  func_OutputUpdate5_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate5_Prototype.Return     = tmpRet;
    func_OutputUpdate5_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate5_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate5_Interface = RTW.FunctionInterface;
  func_OutputUpdate5_Interface.Prototype    = func_OutputUpdate5_Prototype;
  func_OutputUpdate5_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate5_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate5_Prototype.Name = 'Calibration_2020a_step';
  time_5 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 5));
      func_OutputUpdate5_Interface.Timing = time_5;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate5_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_6
Lit_6 = RTW.Literal(Type_int_R0_V0, 6);
    
    
% Data Interface: Const_TID6
empty_timing = RTW.TimingInterface.empty;
Const_TID6 = RTW.DataInterface('', 'TID6', Lit_6, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID6];    
  

  

  func_OutputUpdate6_Prototype = coder.types.Prototype;
  func_OutputUpdate6_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate6_Prototype.Return     = tmpRet;
    func_OutputUpdate6_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate6_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate6_Interface = RTW.FunctionInterface;
  func_OutputUpdate6_Interface.Prototype    = func_OutputUpdate6_Prototype;
  func_OutputUpdate6_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate6_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate6_Prototype.Name = 'Calibration_2020a_step';
  time_6 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 6));
      func_OutputUpdate6_Interface.Timing = time_6;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate6_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_7
Lit_7 = RTW.Literal(Type_int_R0_V0, 7);
    
    
% Data Interface: Const_TID7
empty_timing = RTW.TimingInterface.empty;
Const_TID7 = RTW.DataInterface('', 'TID7', Lit_7, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID7];    
  

  

  func_OutputUpdate7_Prototype = coder.types.Prototype;
  func_OutputUpdate7_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate7_Prototype.Return     = tmpRet;
    func_OutputUpdate7_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate7_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate7_Interface = RTW.FunctionInterface;
  func_OutputUpdate7_Interface.Prototype    = func_OutputUpdate7_Prototype;
  func_OutputUpdate7_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate7_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate7_Prototype.Name = 'Calibration_2020a_step';
  time_7 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 7));
      func_OutputUpdate7_Interface.Timing = time_7;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate7_Interface'];


            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
    TIDArg = coder.types.Argument;
    TIDArg.Type = Type_int_R0_V0;
    TIDArg.Name = 'tid';
    
% Literal: Lit_8
Lit_8 = RTW.Literal(Type_int_R0_V0, 8);
    
    
% Data Interface: Const_TID8
empty_timing = RTW.TimingInterface.empty;
Const_TID8 = RTW.DataInterface('', 'TID8', Lit_8, empty_timing);
    
    
    tmpArgs = [tmpArgs, TIDArg];
    tmpActualArgs = [tmpActualArgs, Const_TID8];    
  

  

  func_OutputUpdate8_Prototype = coder.types.Prototype;
  func_OutputUpdate8_Prototype.Arguments  = tmpArgs;
  func_OutputUpdate8_Prototype.Return     = tmpRet;
    func_OutputUpdate8_Prototype.HeaderFile = ['Calibration_2020a', '.h'];
  func_OutputUpdate8_Prototype.SourceFile = ['Calibration_2020a', '.c'];

  func_OutputUpdate8_Interface = RTW.FunctionInterface;
  func_OutputUpdate8_Interface.Prototype    = func_OutputUpdate8_Prototype;
  func_OutputUpdate8_Interface.ActualArgs   = tmpActualArgs;
  func_OutputUpdate8_Interface.ActualReturn = tmpActualReturn;

        func_OutputUpdate8_Prototype.Name = 'Calibration_2020a_step';
  time_8 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 8));
      func_OutputUpdate8_Interface.Timing = time_8;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate8_Interface'];

          
         
    
      

  







if ~isempty(skippedParameters)
fr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end


% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr);
end


    

fr.writeFunctionInterfaces(codeInfo);
fr.writeServerCallPoints(codeInfo);



    wr.copyTimingInterfacesForLibraryCodegen();
wr.closeRepo();
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
  else
    save codeInfo.mat codeInfo;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
  data = RTW.DataInterface.empty;
  for idx=1:numel(list)
      if ~isPresentDI(data, list(idx))
          data(end+1) = list(idx); %#ok<AGROW>
      end
  end
% End Function: uniquifyDataAccess
        
function isPresent = isPresentDI(list, di)
  isPresent = false;
  for idx = 1:numel(list)
    if isequal(list(idx), di)
      isPresent = true;
      break
    end
  end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataName, iDataVec(idxData).GraphicalName)
       iData(end+1) = iDataVec(idxData);
       break
    end
 end
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr)
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;
        wr.updateSIDForSubsystemBuild("Parameter", i, sid, codeInfo.Parameters(i));
    end

% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
         wr.updateSIDForSubsystemBuild("DataStore", i, sid);

     end

% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
        wr.updateSIDForSubsystemBuild("Inport", i, sid);

    end

% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
        wr.updateSIDForSubsystemBuild("Outport", i, sid);

    end    

